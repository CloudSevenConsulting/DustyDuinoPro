;-------------------------------------------------------------------------------
;LTC5800-IPM Fuse Table
;-------------------------------------------------------------------------------
;
;Eterna’s Fuse Table is a 2kB page in flash that contains two data structures.
;One structure supports hardware configuration immediately following power-on
;reset or the assertion of RESETn. The second structure supports configuration
;of software board support parameters. Fuse Tables are generated via the Fuse 
;Table application described in the Board Specific Configuration Guide.
;
;Hardware configuration of I/O immediately following power-on reset provides a
;method to minimize leakage due to floating nets prior to software 
;configuration. I/O leakage can contribute hundreds of microamperes of leakage
;per input, potentially stressing current limited supplies. 
;
;Examples of software board support parameters include setting of UART modes, 
;clock sources and trim values.
;
;Fuse Tables are loaded into flash using the same software and in-circuit 
;programmer used to load software images as described in the Eterna Serial 
;Programmer Guide.
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
[IO-Configuration-Upper]

;The Eterna's SPI master is used only in master mode
SPI_Master = 0
SPI_Master_Sel_0 = 0
SPI_Master_Sel_1 = 0
SPI_Master_Sel_2 = 0

;CLI UART Mode (unsure)
;CLI UART is required for system debugging
CLI_UART_0 = 1
CLI_UART_1 = 0

;Other modes of communication
I2C = 0
SPI_Slave = 0
SPI_Programming = 0
1_Wire_Master = 0

;External 
Radio_Inhibit = 0
LNA_Enable = 0
Radio_TX = 0
Radio_TXn = 0

SLEEPn = 0
TIMEn = 0

PWM = 0
16_Bit_Timer_In = 0
8_Bit_Timer_In = 0
Low_Power_Timer_in = 0

;When selecting the External Bus option, this will also simultaneously disable
;CLI UART 0 and enable CLI UART 1 and is the only necessary configuration for
;External Bus support
External_Bus = 0

;-------------------------------------------------------------------------------
;Format: 
;(Pin#_Signal) = 
;(GPIO, InputEnable, PullUp, PullDown, OutputEnable, OutputValue, DriveStrength)
;
; GPIO = Configure pin as GPIO (only certain pins)
;
; InputEnable = IO’s input enable. Input leakage current will increase 
;               substantially when IO’s that are not actively driven whose input
;               enable is set. 
; PullUp = Enable the IO’s internal pull up resistor. The internal pull up and 
;          pull down resistors can not be simultaneously enabled.
;
; PullDown = Enable the IO’s internal pull down resistor. The internal pull up 
;            and pull down resistors can not be simultaneously enabled. 
;
; OutputEnable = IO's output enable
;
; OutputValue = Output Value can only be set for IOs set at GPIO, other pin 
;               functions have defined values for their inactive state and are 
;               controlled via their controlling modules in the design. 
;
; DriveStrength = Only those IO’s with an active button shown in the Drive 
;                 Strength column can be modified from their default value. 
;                 It is strongly suggested that the minimum drive strength be 
;                 selected unless there is an understood need for a higher drive
;                 strength. 
[IO-Configuration-Lower]

;Pin#01, Type 1, Input, No-Pull, Radio Inhibit
;------------------
;The RADIO_INHIBIT input enables an external controller to temporarily disable 
;the radio software drivers (for example, to take a sensor reading that is 
;susceptible to radio interference). When RADIO_INHIBIT is asserted the software
;radio drivers will disallow radio operations including clear channel 
;assessment, packet transmits, or packet receipts. If the current timeslot is
;active when RADIO_INHIBIT is asserted the radio will be diabled after the 
;present operation completes. 
;This pin is always enabled and must be driven or pulled to a valid state to
;avoid leakage (see datasheet/IPM01)
1_RADIO_INHIBIT = (0, 0, 0, 1, 0, 0, 1mA)

;Pin#11, Type 1, Output, No-Pull, External LNA Enable / GPIO17
;------------------
;Control signals generated by the autonomous MAC supporting the integration
;of an external LNA/PA
11_LNA_EN_GPIO17 = (1, 0, 0, 0, 1, 0, 1mA)

;Pin#12, Type 1, Output, No-Pull, Radio TX Active (External PA/Enable Switch 
;                                 Control) / GPIO18
;------------------
;Control signals generated by the autonomous MAC supporting the integration
;of an external LNA/PA
12_RADIO_TX_GPIO18 = (1, 0, 0, 0, 1, 0, 1mA)

;Pin#13, Type 1, Output, No-Pull, Radio TX Active (External PA/Enable Switch 
;                                 Control) Active Low / GPIO19
;------------------
;Control signals generated by the autonomous MAC supporting the integration
;of an external LNA/PA
13_RADIO_TXn_GPIO19 = (1, 0, 0, 0, 1, 0, 1mA)

;Pin#22, Type 1, Input, Pull-Up, Reset Input, Active Low
;------------------
;The asynchronous reset signal is internally pulled up. Resetting Eterna will 
;result in the ARM Cortex M3 rebooting and loss of network connectivity. Use of 
;this signal for resetting Eterna is not recommended except during power-on and
;in-circuit programming.
;Note 1: Must be asserted (along with FLASH_P_ENn) for in-circuit programming 
;over the IPCS SPI bus.
;Characteristics:
;   - RESETn Pulse Width
;       Min=125 us
22_RESETn = (na, na, 1, na, na, na, na)

23_TDI = (na, na, 1, 0, na, na, na)
24_TDO
25_TMS
26_TCK
27_DP4_GPIO27
33_DP3_GPIO22_TIMER8_IN
34_DP2_GPIO21_LPTIMER_IN
35_SLEEPn_GPIO14
36_DP0_GPIO0_SPIM_SS_2n
37_UARTCO_TX
38_UARTCO_RX
39_SPIM_MISO_GPIO11
40_IPCS_MISO_GPIO6
41_SPIM_MOSI_GPIO10
42_IPCS_MOSI_GPIO5
43_SPIM_SCK_GPIO9
44_IPCS_SCK_GPIO4
45_IPCS_SSN_GPIO3
46_SPIM_SS_1N_GPIO13
47_SPIM_SS_0N_GPIO12
48_DP1_GPIO20_TIMER16_IN
49_PWM0_GPIO16 =
50_SPIS_MISO_1_WIRE_UARTC1_TX = 
51_SPIS_MOSI_GPIO26_UARTC1_RX = 
52_SPIS_SCK_SCL = 
53_SPIS_SSN_SDA = 
55_FLASH_P_ENn = 
66_UART_RX_RTSn = 
67_UART_RX_CTSn = 
68_UART_RX = 
69_UART_TX_RTSn = 
70_UART_TX_CTSn = 
71_UART_TX = 
72_TIMEn =



